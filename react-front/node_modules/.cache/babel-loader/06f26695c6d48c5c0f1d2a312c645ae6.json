{"ast":null,"code":"import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport FormCheck from './FormCheck';\nimport FormControl from './FormControl';\nimport FormFloating from './FormFloating';\nimport FormGroup from './FormGroup';\nimport FormLabel from './FormLabel';\nimport FormRange from './FormRange';\nimport FormSelect from './FormSelect';\nimport FormText from './FormText';\nimport Switch from './Switch';\nimport FloatingLabel from './FloatingLabel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\r\n   * The Form `ref` will be forwarded to the underlying element,\r\n   * which means, unless it's rendered `as` a composite component,\r\n   * it will be a DOM node, when resolved.\r\n   *\r\n   * @type {ReactRef}\r\n   * @alias ref\r\n   */\n  _ref: PropTypes.any,\n\n  /**\r\n   * Mark a form as having been validated. Setting it to `true` will\r\n   * toggle any validation styles on the forms elements.\r\n   */\n  validated: PropTypes.bool,\n  as: PropTypes.elementType\n};\nconst Form = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    className,\n    validated,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'form',\n    ...props\n  } = _ref;\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ref: ref,\n    className: classNames(className, validated && 'was-validated')\n  });\n});\nForm.displayName = 'Form';\nForm.propTypes = propTypes;\nexport default Object.assign(Form, {\n  Group: FormGroup,\n  Control: FormControl,\n  Floating: FormFloating,\n  Check: FormCheck,\n  Switch,\n  Label: FormLabel,\n  Text: FormText,\n  Range: FormRange,\n  Select: FormSelect,\n  FloatingLabel\n});","map":null,"metadata":{},"sourceType":"module"}