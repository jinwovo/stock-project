{"ast":null,"code":"import { useState } from 'react';\nimport useEffect from './useIsomorphicEffect';\nvar targetMap = new WeakMap();\nvar resizeObserver;\n\nfunction getResizeObserver() {\n  // eslint-disable-next-line no-return-assign\n  return resizeObserver = resizeObserver || new window.ResizeObserver(function (entries) {\n    entries.forEach(function (entry) {\n      var handler = targetMap.get(entry.target);\n      if (handler) handler(entry.contentRect);\n    });\n  });\n}\n/**\r\n * Efficiently observe size changes on an element. Depends on the `ResizeObserver` api,\r\n * and polyfills are needed in older browsers.\r\n *\r\n * ```ts\r\n * const [ref, attachRef] = useCallbackRef(null);\r\n *\r\n * const rect = useResizeObserver(ref);\r\n *\r\n * return (\r\n *  <div ref={attachRef}>\r\n *    {JSON.stringify(rect)}\r\n *  </div>\r\n * )\r\n * ```\r\n *\r\n * @param element The DOM element to observe\r\n */\n\n\nexport default function useResizeObserver(element) {\n  var _useState = useState(null),\n      rect = _useState[0],\n      setRect = _useState[1];\n\n  useEffect(function () {\n    if (!element) return;\n    getResizeObserver().observe(element);\n    setRect(element.getBoundingClientRect());\n    targetMap.set(element, function (rect) {\n      setRect(rect);\n    });\n    return function () {\n      targetMap.delete(element);\n    };\n  }, [element]);\n  return rect;\n}","map":null,"metadata":{},"sourceType":"module"}